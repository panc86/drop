services:
  zookeeper:
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    hostname: zookeeper
    image: ${DOCKER_REGISTRY:-index.docker.io}/confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"

  broker:
    container_name: broker
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://${KAFKA_BOOTSTRAP_SERVERS:-localhost:9092}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Metrics
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_ENABLE: "false"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
    hostname: broker
    image: ${DOCKER_REGISTRY:-index.docker.io}/confluentinc/cp-server:7.5.0
    ports:
      - "9092:9092"

  schema-registry:
    container_name: schema-registry
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    hostname: schema-registry
    image: ${DOCKER_REGISTRY:-index.docker.io}/confluentinc/cp-schema-registry:7.5.0
    ports:
      - "8081:8081"

  ksqldb-server:
    container_name: ksqldb-server
    depends_on:
      - broker
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    hostname: ksqldb-server
    image: ${DOCKER_REGISTRY:-index.docker.io}/confluentinc/cp-ksqldb-server:7.5.0
    ports:
      - "8088:8088"

  ksqldb-cli:
    container_name: ksqldb-cli
    depends_on:
      - broker
      - ksqldb-server
    entrypoint: /bin/sh
    image: ${DOCKER_REGISTRY:-index.docker.io}/confluentinc/cp-ksqldb-cli:7.5.0
    tty: true

  rest-proxy:
    container_name: rest-proxy
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    hostname: rest-proxy
    image: ${DOCKER_REGISTRY:-index.docker.io}/confluentinc/cp-kafka-rest:7.5.0
    ports:
      - "8082:8082"

  init-kafka-topics:
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic extractions --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic events --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic annotated_texts --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic geocoded_texts --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "
    container_name: init-kafka-topics
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    image: ${DOCKER_REGISTRY:-index.docker.io}/confluentinc/cp-server:7.5.0

  redis:
    environment:
      REDIS_ARGS: --save 60 1000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 10
    image: ${DOCKER_REGISTRY:-index.docker.io}/redis:7.0.5-alpine
    ports:
      - "6379:6379"

  extractors-listener:
    command: --listen
    depends_on:
      - redis
    environment:
      http_proxy:
      https_proxy:
      KAFKA_BOOTSTRAP_SERVERS: 'broker:29092'
      REDIS_URL: 'redis://redis:6379'
    image: ${DOCKER_REGISTRY:-index.docker.io}/pipeline/extractors:0.1.0

  extractors-worker:
    command: --worker
    depends_on:
      - redis
    deploy:
      replicas: 8
      resources:
        limits:
          cpus: '2'
          memory: 128m
    environment:
      http_proxy:
      https_proxy:
      KAFKA_BOOTSTRAP_SERVERS: 'broker:29092'
      REDIS_URL: 'redis://redis:6379'
    image: ${DOCKER_REGISTRY:-index.docker.io}/pipeline/extractors:0.1.0

  text-annotator-listener:
    command: --listen
    depends_on:
      - redis
    environment:
      http_proxy:
      https_proxy:
      KAFKA_BOOTSTRAP_SERVERS: 'broker:29092'
    image: ${DOCKER_REGISTRY:-index.docker.io}/pipeline/transformers/text-annotator:0.1.0
    volumes:
      - annotation-db:/usr/src/app/src/app/data

  #text-annotator-worker:
  #  command: --worker
  #  depends_on:
  #    - redis
  #  deploy:
  #    replicas: 4
  #    resources:
  #      limits:
  #        cpus: '8'
  #        memory: 4G
  #  environment:
  #    http_proxy:
  #    https_proxy:
  #    KAFKA_BOOTSTRAP_SERVERS: 'broker:29092' 
  #  image: ${DOCKER_REGISTRY:-index.docker.io}/pipeline/transformers/text-annotator:0.1.0
  #  network_mode: host
  #  volumes:
  #    - annotation-db:/usr/src/app/src/app/data

  text-geocoder-listener:
    command: --listen
    depends_on:
      - redis
    environment:
      http_proxy:
      https_proxy:
      KAFKA_BOOTSTRAP_SERVERS: 'broker:29092'
    image: ${DOCKER_REGISTRY:-index.docker.io}/pipeline/transformers/text-geocoder:0.1.0
    volumes:
      - geocode-db:/usr/src/app/src/app/data

  #text-geocoder-worker:
  #  command: --worker
  #  depends_on:
  #    - redis
  #  deploy:
  #    replicas: 4
  #    resources:
  #      limits:
  #        cpus: '8'
  #        memory: 8G
  #  environment:
  #    http_proxy:
  #    https_proxy:
  #    KAFKA_BOOTSTRAP_SERVERS: 'broker:29092' 
  #    REDIS_URL: 'redis://redis:6379/0'
  #  image: ${DOCKER_REGISTRY:-index.docker.io}/pipeline/transformers/text-geocoder:0.1.0
  #  network_mode: host
  #  volumes:
  #    - geocode-db:/usr/src/app/src/app/data

volumes:
  annotation-db:
  geocode-db:
